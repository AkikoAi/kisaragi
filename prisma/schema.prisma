// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tabel utama User
model User {
  id       String  @id @default(uuid()) // Primary Key UUID unik untuk tiap user
  username String  @unique // Username unik
  email    String? @unique // Email boleh null tapi tetap unik jika diisi
  password String // Password hash
  name     String  @default("Kisaragi Employe")
  role     String  @default("Pengguna")

  groups     UserGroup[] // Relasi: User bisa masuk banyak Group (Many-to-Many via pivot UserGroup)
  privileges UserPrivilege[] // Relasi: User bisa punya Privilege langsung (Many-to-Many via pivot UserPrivilege)
  profile    Profile? // Relasi: One-to-One dengan Profile (optional, bisa null)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)
  WarehouseLog WarehouseLog[]
}

/// Tabel Profile, One-to-One dengan User
model Profile {
  id String @id // Primary Key, juga Foreign Key ke User.id (One-to-One)

  alamat     String? // Kolom tambahan
  golDarah   String?
  tahunLulus String?
  avatarUrl  String?

  User      User     @relation(fields: [id], references: [username], onDelete: Cascade) // Relasi wajib ke User
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Tabel Group (Role)
model Group {
  name       String           @id // Primary Key: nama group
  users      UserGroup[] // Relasi: Group punya banyak User (Many-to-Many via pivot UserGroup)
  privileges GroupPrivilege[] // Relasi: Group bisa punya banyak Privilege (Many-to-Many via pivot GroupPrivilege)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

/// Tabel Privilege (Hak akses tertentu)
model Privilege {
  prefix     String           @id // Primary Key: prefix privilege (misalnya 'read', 'write', 'delete')
  userLinks  UserPrivilege[] // Relasi: Bisa diberikan langsung ke User
  groupLinks GroupPrivilege[] // Relasi: Bisa diberikan ke Group
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

/// Pivot table User ⇄ Group (Many-to-Many)
model UserGroup {
  userId    String
  groupName String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // FK ke User
  group     Group    @relation(fields: [groupName], references: [name], onDelete: Cascade) // FK ke Group
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, groupName]) // Composite PK: satu user tidak bisa join ke group yang sama lebih dari 1x
}

/// Pivot table User ⇄ Privilege (Many-to-Many)
model UserPrivilege {
  userId      String
  privilegeId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // FK ke User
  privilege Privilege @relation(fields: [privilegeId], references: [prefix], onDelete: Cascade) // FK ke Privilege
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([userId, privilegeId]) // Composite PK: satu privilege unik per user
}

/// Pivot table Group ⇄ Privilege (Many-to-Many)
model GroupPrivilege {
  groupName   String
  privilegeId String

  group     Group     @relation(fields: [groupName], references: [name], onDelete: Cascade) // FK ke Group
  privilege Privilege @relation(fields: [privilegeId], references: [prefix], onDelete: Cascade) // FK ke Privilege
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([groupName, privilegeId]) // Composite PK: satu privilege unik per group
}

/// Riwayat aktivitas gudang
model WarehouseLog {
  id     String @id @default(uuid())
  userId String // User yang terlibat
  ItemId String // Item gudang yang diakses

  user      User          @relation(fields: [userId], references: [id])
  item      WarehouseItem @relation(fields: [ItemId], references: [id])
  createdAt DateTime      @default(now())
}

/// Tabel Lemari gudang
model WarehouseCupBoard {
  id   String          @id @unique
  name String          @unique // nama Lemari Contoh "Pisau Komando"
  item WarehouseItem[] // Item
}

/// Tabel Item gudang yang berada di lemari
model WarehouseItem {
  id         String @id @default(uuid()) // id item
  cupBoardId String // lemari tempat item berada

  name        String // Nama item
  description String // Desktipsi singkat tentang item
  expired     DateTime? // Kapan Item Expired
  inCupBoard  Boolean? // Apakah item masih ada di lemari
  lastCheck   DateTime? // Terakhir kali dicek
  isDeleted   Boolean   @default(false)

  CupBoard     WarehouseCupBoard? @relation(fields: [cupBoardId], references: [name])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  WarehouseLog WarehouseLog[]
}
