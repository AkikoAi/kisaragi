// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = ".@/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tabel utama User
model User {
  // Informasi untuk login
  username String @unique // Username unik
  password String // Password hash

  // Informasi akun
  id           String  @id @default(uuid()) // Primary Key UUID unik untuk tiap user
  loginVersion Int     @default(1) // mendeteksi apakah username atau password berubah
  limit        Int     @default(3) //  jumlah percobaan login
  email        String? @unique // Email boleh null tapi tetap unik jika diisi
  name         String  @default("Kisaragi Employe")
  role         String  @default("Pengguna")
  privilege    Int     @default(1) // Tingkat izin user untuk melakukan aksi
  isVerified   Boolean @default(false) // Apakah akun user terverifikasi untuk melanjutkanF
  avatarUrl    String?

  //groups     UserGroup[] // Relasi: User bisa masuk banyak Group (Many-to-Many via pivot UserGroup)
  //privileges UserPrivilege[] // Relasi: User bisa punya Privilege langsung (Many-to-Many via pivot UserPrivilege)
  profile Profile? // Relasi: One-to-One dengan Profile (optional, bisa null)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)
  WarehouseLog WarehouseLog[]
  Attendance   Attendance[]
}

/// Tabel Profile, One-to-One dengan User
model Profile {
  id String @id // Primary Key, juga Foreign Key ke User.id (One-to-One)

  alamat     String? // Kolom tambahan
  golDarah   String?
  tahunLulus String?
  avatarUrl  String?

  User      User     @relation(fields: [id], references: [username], onDelete: Cascade) // Relasi wajib ke User
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Tabel absensi karyawan lengkap dengan waktu masuk dan keluar
model Attendance {
  id     String @id @default(uuid()) // Primary Key UUID unik untuk tiap absensi
  // Relasi ke User yang melakukan absensi
  userId String // FK ke User yang melakukan absensi
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relasi ke User

  // Informasi absensi
  terlambat  Boolean @default(false) // Apakah terlambat masuk
  keterangan String? // Keterangan tambahan jika ada

  // Waktu,ip dan lokasi masuk
  clockIn   DateTime @default(now()) // Waktu masuk, default sekarang
  clockInIp String? // IP address saat clock-in

  // Lokasi saat clock-in
  clockInLocation String // lokasi saat clock-in

  // Waktu, ip dan lokasi keluar
  clockOut   DateTime? // Waktu keluar, bisa null jika belum keluar
  clockOutIp String? // IP address saat clock-out

  // Lokasi saat clock-out
  clockOutLocation String? // lokasi saat clock-in

  isDeleted Boolean @default(false) // Tandai apakah absensi ini sudah dihapus atau tidak

  // waktu dibuat dan diupdate
  createdAt DateTime @default(now()) // Waktu dibuat
  updatedAt DateTime @updatedAt // Waktu terakhir diupdate
}

/**
 * /// Tabel Group (Role)
 * model Group {
 * name       String           @id // Primary Key: nama group
 * users      UserGroup[] // Relasi: Group punya banyak User (Many-to-Many via pivot UserGroup)
 * privileges GroupPrivilege[] // Relasi: Group bisa punya banyak Privilege (Many-to-Many via pivot GroupPrivilege)
 * createdAt  DateTime         @default(now())
 * updatedAt  DateTime         @updatedAt
 * }
 * /// Tabel Privilege (Hak akses tertentu)
 * model Privilege {
 * prefix     String           @id // Primary Key: prefix privilege (misalnya 'read', 'write', 'delete')
 * userLinks  UserPrivilege[] // Relasi: Bisa diberikan langsung ke User
 * groupLinks GroupPrivilege[] // Relasi: Bisa diberikan ke Group
 * createdAt  DateTime         @default(now())
 * updatedAt  DateTime         @updatedAt
 * }
 * /// Pivot table User ⇄ Group (Many-to-Many)
 * model UserGroup {
 * userId    String
 * groupName String
 * user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // FK ke User
 * group     Group    @relation(fields: [groupName], references: [name], onDelete: Cascade) // FK ke Group
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * @@id([userId, groupName]) // Composite PK: satu user tidak bisa join ke group yang sama lebih dari 1x
 * }
 * /// Pivot table User ⇄ Privilege (Many-to-Many)
 * model UserPrivilege {
 * userId      String
 * privilegeId String
 * user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // FK ke User
 * privilege Privilege @relation(fields: [privilegeId], references: [prefix], onDelete: Cascade) // FK ke Privilege
 * createdAt DateTime  @default(now())
 * updatedAt DateTime  @updatedAt
 * @@id([userId, privilegeId]) // Composite PK: satu privilege unik per user
 * }
 * /// Pivot table Group ⇄ Privilege (Many-to-Many)
 * model GroupPrivilege {
 * groupName   String
 * privilegeId String
 * group     Group     @relation(fields: [groupName], references: [name], onDelete: Cascade) // FK ke Group
 * privilege Privilege @relation(fields: [privilegeId], references: [prefix], onDelete: Cascade) // FK ke Privilege
 * createdAt DateTime  @default(now())
 * updatedAt DateTime  @updatedAt
 * @@id([groupName, privilegeId]) // Composite PK: satu privilege unik per group
 * }
 */

/// Riwayat aktivitas gudang
model WarehouseLog {
  id     String @id @default(uuid())
  userId String // User yang terlibat
  ItemId String // Item gudang yang diakses

  user      User          @relation(fields: [userId], references: [id])
  item      WarehouseItem @relation(fields: [ItemId], references: [id])
  createdAt DateTime      @default(now())
}

/// Tabel Lemari gudang
model WarehouseCupBoard {
  id   String          @id @unique @default(uuid())
  name String          @unique // nama Lemari Contoh "Pisau Komando"
  item WarehouseItem[] // Item
}

/// Tabel Item gudang yang berada di lemari
model WarehouseItem {
  id         String @id @default(uuid()) // id item
  cupBoardId String // lemari tempat item berada

  name        String // Nama item
  description String // Desktipsi singkat tentang item
  expired     DateTime? // Kapan Item Expired
  inCupBoard  Boolean? // Apakah item masih ada di lemari
  lastCheck   DateTime? // Terakhir kali dicek
  isDeleted   Boolean   @default(false)

  CupBoard     WarehouseCupBoard? @relation(fields: [cupBoardId], references: [id])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  WarehouseLog WarehouseLog[]
}

/// Tabel yang menyimpan log aktivitas
enum LogType {
  ERROR
  LOG
  USER
}

model Logs {
  id        String   @id @default(uuid())
  message   String // Pesan log
  type      LogType // Jenis log (ERROR, LOG, USER)
  timestamp DateTime @default(now()) // Waktu aksi dilakukan
}
